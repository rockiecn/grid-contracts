// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketOrder is an auto generated low-level Go binding around an user-defined struct.
type MarketOrder struct {
	User            common.Address
	Provider        common.Address
	P               MarketPricePerHour
	R               MarketResources
	TotalValue      *big.Int
	Remain          *big.Int
	Remuneration    *big.Int
	UserConfirm     bool
	ProviderConfirm bool
	ActivateTime    *big.Int
	LastSettleTime  *big.Int
	Probation       *big.Int
	Duration        *big.Int
	Status          uint8
}

// MarketPricePerHour is an auto generated low-level Go binding around an user-defined struct.
type MarketPricePerHour struct {
	PCPU  uint64
	PGPU  uint64
	PMEM  uint64
	PDISK uint64
}

// MarketResources is an auto generated low-level Go binding around an user-defined struct.
type MarketResources struct {
	NCPU  uint64
	NGPU  uint64
	NMEM  uint64
	NDISK uint64
}

// MarketMetaData contains all meta data concerning the Market contract.
var MarketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.PricePerHour\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.Resources\",\"name\":\"r\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remuneration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userConfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"providerConfirm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structMarket.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.PricePerHour\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.Resources\",\"name\":\"r\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remuneration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userConfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"providerConfirm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structMarket.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"feeOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.PricePerHour\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.Resources\",\"name\":\"r\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remuneration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userConfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"providerConfirm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structMarket.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"providerCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"userCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613958806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636eba2b131161005b5780636eba2b13146100d65780638ebab3ea14610106578063b565fd0914610122578063ef380cbe146101525761007d565b80631c5a9d9c146100825780632e9a7aee1461009e578063504cb846146100ba575b600080fd5b61009c60048036038101906100979190612b50565b61016e565b005b6100b860048036038101906100b39190612b7d565b610755565b005b6100d460048036038101906100cf9190612b50565b6110f5565b005b6100f060048036038101906100eb9190612b50565b611607565b6040516100fd9190612e0d565b60405180910390f35b610120600480360381019061011b9190612e55565b61199a565b005b61013c600480360381019061013791906131ff565b611ef5565b604051610149919061323c565b60405180910390f35b61016c60048036038101906101679190613257565b611efc565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff16815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f90613308565b60405180910390fd5b6000816101a0015160ff16146105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061339a565b60405180910390fd5b426000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090181905550426000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018190555060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160006101000a81548160ff021916908360ff1602179055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4690613406565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb890613472565b60405180910390fd5b610bcb33836122ce565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff1681525050905060026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160006101000a81548160ff021916908360ff1602179055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338360a001516040518363ffffffff1660e01b81526004016110289291906134a1565b6020604051808303816000875af1158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906134df565b5060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff168152505090508173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146114ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e690613558565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611561576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611558906135ea565b60405180910390fd5b61156b82336122ce565b60026000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160006101000a81548160ff021916908360ff1602179055505050565b61160f612995565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff16815250509050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8b90613656565b60405180910390fd5b8060c00151821115611ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd2906136e8565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611e169291906134a1565b6020604051808303816000875af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5991906134df565b50816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016000828254611ee89190613737565b9250508190555050505050565b6000919050565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd333084608001516040518463ffffffff1660e01b8152600401611f3d9392919061376b565b6020604051808303816000875af1158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8091906134df565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505060608201518160030160008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050506080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160070160016101000a81548160ff0219169083151502179055506101208201518160080155610140820151816009015561016082015181600a015561018082015181600b01556101a082015181600c0160006101000a81548160ff021916908360ff160217905550905050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600382016040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505081526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820160009054906101000a900460ff1660ff1660ff168152505090506000600a82610140015161266a91906137a2565b90506001826101a0015160ff16146126b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ae90613848565b60405180910390fd5b8161014001518110156126c957600080fd5b6000826101400151826126dc9190613737565b90506000836101200151836126f19190613737565b90506000846101800151856080015161270a9190613897565b905060008060009050866101800151841061272f578660a0015191506001905061273e565b848361273b91906138c8565b91505b816000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008282546127cc9190613737565b92505081905550816000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601600082825461286191906137a2565b92505081905550856000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090181905550801561298a5760036000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160006101000a81548160ff021916908360ff1602179055505b505050505050505050565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016129e3612a43565b81526020016129f0612a93565b815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081526020016000815260200160008152602001600060ff1681525090565b6040518060800160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6040518060800160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b1d82612af2565b9050919050565b612b2d81612b12565b8114612b3857600080fd5b50565b600081359050612b4a81612b24565b92915050565b600060208284031215612b6657612b65612aed565b5b6000612b7484828501612b3b565b91505092915050565b60008060408385031215612b9457612b93612aed565b5b6000612ba285828601612b3b565b9250506020612bb385828601612b3b565b9150509250929050565b612bc681612b12565b82525050565b600067ffffffffffffffff82169050919050565b612be981612bcc565b82525050565b608082016000820151612c056000850182612be0565b506020820151612c186020850182612be0565b506040820151612c2b6040850182612be0565b506060820151612c3e6060850182612be0565b50505050565b608082016000820151612c5a6000850182612be0565b506020820151612c6d6020850182612be0565b506040820151612c806040850182612be0565b506060820151612c936060850182612be0565b50505050565b6000819050919050565b612cac81612c99565b82525050565b60008115159050919050565b612cc781612cb2565b82525050565b600060ff82169050919050565b612ce381612ccd565b82525050565b61028082016000820151612d006000850182612bbd565b506020820151612d136020850182612bbd565b506040820151612d266040850182612bef565b506060820151612d3960c0850182612c44565b506080820151612d4d610140850182612ca3565b5060a0820151612d61610160850182612ca3565b5060c0820151612d75610180850182612ca3565b5060e0820151612d896101a0850182612cbe565b50610100820151612d9e6101c0850182612cbe565b50610120820151612db36101e0850182612ca3565b50610140820151612dc8610200850182612ca3565b50610160820151612ddd610220850182612ca3565b50610180820151612df2610240850182612ca3565b506101a0820151612e07610260850182612cda565b50505050565b600061028082019050612e236000830184612ce9565b92915050565b612e3281612c99565b8114612e3d57600080fd5b50565b600081359050612e4f81612e29565b92915050565b600080600060608486031215612e6e57612e6d612aed565b5b6000612e7c86828701612b3b565b9350506020612e8d86828701612b3b565b9250506040612e9e86828701612e40565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ef682612ead565b810181811067ffffffffffffffff82111715612f1557612f14612ebe565b5b80604052505050565b6000612f28612ae3565b9050612f348282612eed565b919050565b612f4281612bcc565b8114612f4d57600080fd5b50565b600081359050612f5f81612f39565b92915050565b600060808284031215612f7b57612f7a612ea8565b5b612f856080612f1e565b90506000612f9584828501612f50565b6000830152506020612fa984828501612f50565b6020830152506040612fbd84828501612f50565b6040830152506060612fd184828501612f50565b60608301525092915050565b600060808284031215612ff357612ff2612ea8565b5b612ffd6080612f1e565b9050600061300d84828501612f50565b600083015250602061302184828501612f50565b602083015250604061303584828501612f50565b604083015250606061304984828501612f50565b60608301525092915050565b61305e81612cb2565b811461306957600080fd5b50565b60008135905061307b81613055565b92915050565b61308a81612ccd565b811461309557600080fd5b50565b6000813590506130a781613081565b92915050565b600061028082840312156130c4576130c3612ea8565b5b6130cf6101c0612f1e565b905060006130df84828501612b3b565b60008301525060206130f384828501612b3b565b602083015250604061310784828501612f65565b60408301525060c061311b84828501612fdd565b60608301525061014061313084828501612e40565b60808301525061016061314584828501612e40565b60a08301525061018061315a84828501612e40565b60c0830152506101a061316f8482850161306c565b60e0830152506101c06131848482850161306c565b610100830152506101e061319a84828501612e40565b610120830152506102006131b084828501612e40565b610140830152506102206131c684828501612e40565b610160830152506102406131dc84828501612e40565b610180830152506102606131f284828501613098565b6101a08301525092915050565b6000610280828403121561321657613215612aed565b5b6000613224848285016130ad565b91505092915050565b61323681612c99565b82525050565b6000602082019050613251600083018461322d565b92915050565b60008060006102c0848603121561327157613270612aed565b5b600061327f86828701612b3b565b935050602061329086828701612b3b565b92505060406132a1868287016130ad565b9150509250925092565b600082825260208201905092915050565b7f6163746976617465206f6e6c792063616c6c65642062792070726f7669646572600082015250565b60006132f26020836132ab565b91506132fd826132bc565b602082019050919050565b60006020820190508181036000830152613321816132e5565b9050919050565b7f6f6e6c7920756e616374697665206f726465722063616e20626520616374697660008201527f6174656400000000000000000000000000000000000000000000000000000000602082015250565b60006133846024836132ab565b915061338f82613328565b604082019050919050565b600060208201905081810360008301526133b381613377565b9050919050565b7f7468652063616c6c6572206e6f74206f72646572277320757365720000000000600082015250565b60006133f0601b836132ab565b91506133fb826133ba565b602082019050919050565b6000602082019050818103600083015261341f816133e3565b9050919050565b7f7468652070726f7669646572206973206572726f720000000000000000000000600082015250565b600061345c6015836132ab565b915061346782613426565b602082019050919050565b6000602082019050818103600083015261348b8161344f565b9050919050565b61349b81612b12565b82525050565b60006040820190506134b66000830185613492565b6134c3602083018461322d565b9392505050565b6000815190506134d981613055565b92915050565b6000602082840312156134f5576134f4612aed565b5b6000613503848285016134ca565b91505092915050565b7f7468652075736572206973206572726f72000000000000000000000000000000600082015250565b60006135426011836132ab565b915061354d8261350c565b602082019050919050565b6000602082019050818103600083015261357181613535565b9050919050565b7f7468652063616c6c6572206973206e6f74206f7264657227732070726f76696460008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006135d46022836132ab565b91506135df82613578565b604082019050919050565b60006020820190508181036000830152613603816135c7565b9050919050565b7f63616c6c6572206d757374206265207468652070726f76696465720000000000600082015250565b6000613640601b836132ab565b915061364b8261360a565b602082019050919050565b6000602082019050818103600083015261366f81613633565b9050919050565b7f74686520616d6f756e742073686f756c64206e6f74206c61726765722074686160008201527f6e2072656d756e65726174696f6e000000000000000000000000000000000000602082015250565b60006136d2602e836132ab565b91506136dd82613676565b604082019050919050565b60006020820190508181036000830152613701816136c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061374282612c99565b915061374d83612c99565b925082820390508181111561376557613764613708565b5b92915050565b60006060820190506137806000830186613492565b61378d6020830185613492565b61379a604083018461322d565b949350505050565b60006137ad82612c99565b91506137b883612c99565b92508282019050808211156137d0576137cf613708565b5b92915050565b7f6f72646572206d75737420626520696e2061637469766174652073746174757360008201527f20746f20736574746c6500000000000000000000000000000000000000000000602082015250565b6000613832602a836132ab565b915061383d826137d6565b604082019050919050565b6000602082019050818103600083015261386181613825565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006138a282612c99565b91506138ad83612c99565b9250826138bd576138bc613868565b5b828204905092915050565b60006138d382612c99565b91506138de83612c99565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561391757613916613708565b5b82820290509291505056fea26469706673582212206c913252bf4eba3344656eb2fe8aea65bc0e5f24d840f029ea4db95f71d529fa64736f6c63430008100033",
}

// MarketABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketMetaData.ABI instead.
var MarketABI = MarketMetaData.ABI

// MarketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketMetaData.Bin instead.
var MarketBin = MarketMetaData.Bin

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := MarketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// FeeOrder is a free data retrieval call binding the contract method 0xb565fd09.
//
// Solidity: function feeOrder((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) view returns(uint256)
func (_Market *MarketCaller) FeeOrder(opts *bind.CallOpts, order MarketOrder) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "feeOrder", order)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeOrder is a free data retrieval call binding the contract method 0xb565fd09.
//
// Solidity: function feeOrder((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) view returns(uint256)
func (_Market *MarketSession) FeeOrder(order MarketOrder) (*big.Int, error) {
	return _Market.Contract.FeeOrder(&_Market.CallOpts, order)
}

// FeeOrder is a free data retrieval call binding the contract method 0xb565fd09.
//
// Solidity: function feeOrder((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) view returns(uint256)
func (_Market *MarketCallerSession) FeeOrder(order MarketOrder) (*big.Int, error) {
	return _Market.Contract.FeeOrder(&_Market.CallOpts, order)
}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketCaller) GetOrder(opts *bind.CallOpts, provider common.Address) (MarketOrder, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getOrder", provider)

	if err != nil {
		return *new(MarketOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(MarketOrder)).(*MarketOrder)

	return out0, err

}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketSession) GetOrder(provider common.Address) (MarketOrder, error) {
	return _Market.Contract.GetOrder(&_Market.CallOpts, provider)
}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketCallerSession) GetOrder(provider common.Address) (MarketOrder, error) {
	return _Market.Contract.GetOrder(&_Market.CallOpts, provider)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketTransactor) Activate(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "activate", user)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketSession) Activate(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.Activate(&_Market.TransactOpts, user)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketTransactorSession) Activate(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.Activate(&_Market.TransactOpts, user)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address tokenAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketTransactor) CreateOrder(opts *bind.TransactOpts, tokenAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "createOrder", tokenAddr, provider, order)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address tokenAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketSession) CreateOrder(tokenAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.Contract.CreateOrder(&_Market.TransactOpts, tokenAddr, provider, order)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address tokenAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketTransactorSession) CreateOrder(tokenAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.Contract.CreateOrder(&_Market.TransactOpts, tokenAddr, provider, order)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address tokenAddr, address user, uint256 amount) returns()
func (_Market *MarketTransactor) ProWithdraw(opts *bind.TransactOpts, tokenAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "proWithdraw", tokenAddr, user, amount)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address tokenAddr, address user, uint256 amount) returns()
func (_Market *MarketSession) ProWithdraw(tokenAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ProWithdraw(&_Market.TransactOpts, tokenAddr, user, amount)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address tokenAddr, address user, uint256 amount) returns()
func (_Market *MarketTransactorSession) ProWithdraw(tokenAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ProWithdraw(&_Market.TransactOpts, tokenAddr, user, amount)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketTransactor) ProviderCancel(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerCancel", user)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketSession) ProviderCancel(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProviderCancel(&_Market.TransactOpts, user)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketTransactorSession) ProviderCancel(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProviderCancel(&_Market.TransactOpts, user)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address tokenAddr, address provider) returns()
func (_Market *MarketTransactor) UserCancel(opts *bind.TransactOpts, tokenAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "userCancel", tokenAddr, provider)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address tokenAddr, address provider) returns()
func (_Market *MarketSession) UserCancel(tokenAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.Contract.UserCancel(&_Market.TransactOpts, tokenAddr, provider)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address tokenAddr, address provider) returns()
func (_Market *MarketTransactorSession) UserCancel(tokenAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.Contract.UserCancel(&_Market.TransactOpts, tokenAddr, provider)
}
