// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketOrder is an auto generated low-level Go binding around an user-defined struct.
type MarketOrder struct {
	User            common.Address
	Provider        common.Address
	P               MarketPricePerHour
	R               MarketResources
	TotalValue      *big.Int
	Remain          *big.Int
	Remuneration    *big.Int
	UserConfirm     bool
	ProviderConfirm bool
	ActivateTime    *big.Int
	LastSettleTime  *big.Int
	Probation       *big.Int
	Duration        *big.Int
	Status          uint8
}

// MarketPricePerHour is an auto generated low-level Go binding around an user-defined struct.
type MarketPricePerHour struct {
	PCPU  uint64
	PGPU  uint64
	PMEM  uint64
	PDISK uint64
}

// MarketResources is an auto generated low-level Go binding around an user-defined struct.
type MarketResources struct {
	NCPU  uint64
	NGPU  uint64
	NMEM  uint64
	NDISK uint64
}

// MarketMetaData contains all meta data concerning the Market contract.
var MarketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"OrderValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"msg\",\"type\":\"uint8\"}],\"name\":\"Output\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pt\",\"type\":\"uint256\"}],\"name\":\"Paytime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.PricePerHour\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.Resources\",\"name\":\"r\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remuneration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userConfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"providerConfirm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structMarket.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.PricePerHour\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nCPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nGPU\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nMEM\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nDISK\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.Resources\",\"name\":\"r\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remuneration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userConfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"providerConfirm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structMarket.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"proSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"providerCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"userCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// MarketABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketMetaData.ABI instead.
var MarketABI = MarketMetaData.ABI

// MarketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketMetaData.Bin instead.
var MarketBin = MarketMetaData.Bin

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := MarketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// GetKeys is a free data retrieval call binding the contract method 0x2150c518.
//
// Solidity: function getKeys() view returns(address[])
func (_Market *MarketCaller) GetKeys(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getKeys")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetKeys is a free data retrieval call binding the contract method 0x2150c518.
//
// Solidity: function getKeys() view returns(address[])
func (_Market *MarketSession) GetKeys() ([]common.Address, error) {
	return _Market.Contract.GetKeys(&_Market.CallOpts)
}

// GetKeys is a free data retrieval call binding the contract method 0x2150c518.
//
// Solidity: function getKeys() view returns(address[])
func (_Market *MarketCallerSession) GetKeys() ([]common.Address, error) {
	return _Market.Contract.GetKeys(&_Market.CallOpts)
}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketCaller) GetOrder(opts *bind.CallOpts, provider common.Address) (MarketOrder, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getOrder", provider)

	if err != nil {
		return *new(MarketOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(MarketOrder)).(*MarketOrder)

	return out0, err

}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketSession) GetOrder(provider common.Address) (MarketOrder, error) {
	return _Market.Contract.GetOrder(&_Market.CallOpts, provider)
}

// GetOrder is a free data retrieval call binding the contract method 0x6eba2b13.
//
// Solidity: function getOrder(address provider) view returns((address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8))
func (_Market *MarketCallerSession) GetOrder(provider common.Address) (MarketOrder, error) {
	return _Market.Contract.GetOrder(&_Market.CallOpts, provider)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketTransactor) Activate(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "activate", user)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketSession) Activate(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.Activate(&_Market.TransactOpts, user)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address user) returns()
func (_Market *MarketTransactorSession) Activate(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.Activate(&_Market.TransactOpts, user)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address creditAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketTransactor) CreateOrder(opts *bind.TransactOpts, creditAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "createOrder", creditAddr, provider, order)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address creditAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketSession) CreateOrder(creditAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.Contract.CreateOrder(&_Market.TransactOpts, creditAddr, provider, order)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xef380cbe.
//
// Solidity: function createOrder(address creditAddr, address provider, (address,address,(uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),uint256,uint256,uint256,bool,bool,uint256,uint256,uint256,uint256,uint8) order) returns()
func (_Market *MarketTransactorSession) CreateOrder(creditAddr common.Address, provider common.Address, order MarketOrder) (*types.Transaction, error) {
	return _Market.Contract.CreateOrder(&_Market.TransactOpts, creditAddr, provider, order)
}

// ProSettle is a paid mutator transaction binding the contract method 0x94d2e5e9.
//
// Solidity: function proSettle(address user) returns()
func (_Market *MarketTransactor) ProSettle(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "proSettle", user)
}

// ProSettle is a paid mutator transaction binding the contract method 0x94d2e5e9.
//
// Solidity: function proSettle(address user) returns()
func (_Market *MarketSession) ProSettle(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProSettle(&_Market.TransactOpts, user)
}

// ProSettle is a paid mutator transaction binding the contract method 0x94d2e5e9.
//
// Solidity: function proSettle(address user) returns()
func (_Market *MarketTransactorSession) ProSettle(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProSettle(&_Market.TransactOpts, user)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address creditAddr, address user, uint256 amount) returns()
func (_Market *MarketTransactor) ProWithdraw(opts *bind.TransactOpts, creditAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "proWithdraw", creditAddr, user, amount)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address creditAddr, address user, uint256 amount) returns()
func (_Market *MarketSession) ProWithdraw(creditAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ProWithdraw(&_Market.TransactOpts, creditAddr, user, amount)
}

// ProWithdraw is a paid mutator transaction binding the contract method 0x8ebab3ea.
//
// Solidity: function proWithdraw(address creditAddr, address user, uint256 amount) returns()
func (_Market *MarketTransactorSession) ProWithdraw(creditAddr common.Address, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ProWithdraw(&_Market.TransactOpts, creditAddr, user, amount)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketTransactor) ProviderCancel(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerCancel", user)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketSession) ProviderCancel(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProviderCancel(&_Market.TransactOpts, user)
}

// ProviderCancel is a paid mutator transaction binding the contract method 0x504cb846.
//
// Solidity: function providerCancel(address user) returns()
func (_Market *MarketTransactorSession) ProviderCancel(user common.Address) (*types.Transaction, error) {
	return _Market.Contract.ProviderCancel(&_Market.TransactOpts, user)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address creditAddr, address provider) returns()
func (_Market *MarketTransactor) UserCancel(opts *bind.TransactOpts, creditAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "userCancel", creditAddr, provider)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address creditAddr, address provider) returns()
func (_Market *MarketSession) UserCancel(creditAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.Contract.UserCancel(&_Market.TransactOpts, creditAddr, provider)
}

// UserCancel is a paid mutator transaction binding the contract method 0x2e9a7aee.
//
// Solidity: function userCancel(address creditAddr, address provider) returns()
func (_Market *MarketTransactorSession) UserCancel(creditAddr common.Address, provider common.Address) (*types.Transaction, error) {
	return _Market.Contract.UserCancel(&_Market.TransactOpts, creditAddr, provider)
}

// MarketOrderValueIterator is returned from FilterOrderValue and is used to iterate over the raw logs and unpacked data for OrderValue events raised by the Market contract.
type MarketOrderValueIterator struct {
	Event *MarketOrderValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOrderValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOrderValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOrderValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOrderValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOrderValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOrderValue represents a OrderValue event raised by the Market contract.
type MarketOrderValue struct {
	TotalValue *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOrderValue is a free log retrieval operation binding the contract event 0x216194e2c152f877a1ea871f985a850419052b60c2b18bc15c698e73c23768f1.
//
// Solidity: event OrderValue(uint256 totalValue)
func (_Market *MarketFilterer) FilterOrderValue(opts *bind.FilterOpts) (*MarketOrderValueIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "OrderValue")
	if err != nil {
		return nil, err
	}
	return &MarketOrderValueIterator{contract: _Market.contract, event: "OrderValue", logs: logs, sub: sub}, nil
}

// WatchOrderValue is a free log subscription operation binding the contract event 0x216194e2c152f877a1ea871f985a850419052b60c2b18bc15c698e73c23768f1.
//
// Solidity: event OrderValue(uint256 totalValue)
func (_Market *MarketFilterer) WatchOrderValue(opts *bind.WatchOpts, sink chan<- *MarketOrderValue) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "OrderValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOrderValue)
				if err := _Market.contract.UnpackLog(event, "OrderValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderValue is a log parse operation binding the contract event 0x216194e2c152f877a1ea871f985a850419052b60c2b18bc15c698e73c23768f1.
//
// Solidity: event OrderValue(uint256 totalValue)
func (_Market *MarketFilterer) ParseOrderValue(log types.Log) (*MarketOrderValue, error) {
	event := new(MarketOrderValue)
	if err := _Market.contract.UnpackLog(event, "OrderValue", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketOutputIterator is returned from FilterOutput and is used to iterate over the raw logs and unpacked data for Output events raised by the Market contract.
type MarketOutputIterator struct {
	Event *MarketOutput // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketOutputIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketOutput)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketOutput)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketOutputIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketOutputIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketOutput represents a Output event raised by the Market contract.
type MarketOutput struct {
	Msg uint8
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOutput is a free log retrieval operation binding the contract event 0x28c50dfc457ec963adc1b69cfb43284b512fe0b23719b3ab1cdf414d2ff3246c.
//
// Solidity: event Output(uint8 msg)
func (_Market *MarketFilterer) FilterOutput(opts *bind.FilterOpts) (*MarketOutputIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Output")
	if err != nil {
		return nil, err
	}
	return &MarketOutputIterator{contract: _Market.contract, event: "Output", logs: logs, sub: sub}, nil
}

// WatchOutput is a free log subscription operation binding the contract event 0x28c50dfc457ec963adc1b69cfb43284b512fe0b23719b3ab1cdf414d2ff3246c.
//
// Solidity: event Output(uint8 msg)
func (_Market *MarketFilterer) WatchOutput(opts *bind.WatchOpts, sink chan<- *MarketOutput) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Output")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketOutput)
				if err := _Market.contract.UnpackLog(event, "Output", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutput is a log parse operation binding the contract event 0x28c50dfc457ec963adc1b69cfb43284b512fe0b23719b3ab1cdf414d2ff3246c.
//
// Solidity: event Output(uint8 msg)
func (_Market *MarketFilterer) ParseOutput(log types.Log) (*MarketOutput, error) {
	event := new(MarketOutput)
	if err := _Market.contract.UnpackLog(event, "Output", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPaytimeIterator is returned from FilterPaytime and is used to iterate over the raw logs and unpacked data for Paytime events raised by the Market contract.
type MarketPaytimeIterator struct {
	Event *MarketPaytime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPaytimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPaytime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPaytime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPaytimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPaytimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPaytime represents a Paytime event raised by the Market contract.
type MarketPaytime struct {
	Pt  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPaytime is a free log retrieval operation binding the contract event 0x7f788365ed24e64ac0ae6aac49ec58094505982a137d3b3379afd2267fffdd75.
//
// Solidity: event Paytime(uint256 pt)
func (_Market *MarketFilterer) FilterPaytime(opts *bind.FilterOpts) (*MarketPaytimeIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Paytime")
	if err != nil {
		return nil, err
	}
	return &MarketPaytimeIterator{contract: _Market.contract, event: "Paytime", logs: logs, sub: sub}, nil
}

// WatchPaytime is a free log subscription operation binding the contract event 0x7f788365ed24e64ac0ae6aac49ec58094505982a137d3b3379afd2267fffdd75.
//
// Solidity: event Paytime(uint256 pt)
func (_Market *MarketFilterer) WatchPaytime(opts *bind.WatchOpts, sink chan<- *MarketPaytime) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Paytime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPaytime)
				if err := _Market.contract.UnpackLog(event, "Paytime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaytime is a log parse operation binding the contract event 0x7f788365ed24e64ac0ae6aac49ec58094505982a137d3b3379afd2267fffdd75.
//
// Solidity: event Paytime(uint256 pt)
func (_Market *MarketFilterer) ParsePaytime(log types.Log) (*MarketPaytime, error) {
	event := new(MarketPaytime)
	if err := _Market.contract.UnpackLog(event, "Paytime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
